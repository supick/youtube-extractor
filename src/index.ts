import { Hono } from "hono";
import { cors } from "hono/cors";
import { z } from "zod";

const app = new Hono();
let template = "";
template = atob(template);
app.use("/", cors());

app.all("/", async (c) => {
	const { id } = c.req.query();

	if (!id) {
		return c.html(template);
	}

	const videoID = z.string().parse(id);
	const youtubeVideoURL = `https://www.youtube.com/watch?v=${videoID}`;

	const response = await fetch(youtubeVideoURL);
	const html = await response.text();

	// find video data object:  ytInitialPlayerResponse = {...};
	const regex = html.match(`var ytInitialPlayerResponse = (.*);<\/script>`);
	if (!regex) throw new Error("Unable to find video data");

	const json = JSON.parse(regex[1]);

	return c.text(JSON.stringify(json, null, 2));
});

app.onError((err, c) => {
	console.error(`${err}`);
	return c.text(err.toString(), 500);
});

export default app;
